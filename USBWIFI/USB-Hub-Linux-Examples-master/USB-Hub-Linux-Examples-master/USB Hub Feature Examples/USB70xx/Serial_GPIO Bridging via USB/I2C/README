------------------------------------------------------------------------------

This is the README file for I2C Bridging DEMO.

$Id$

vim: spelllang=en spell tw=78

------------------------------------------------------------------------------

Contents:
1) General Information
2) Requirements
3) Building and installing MPLABConnect
4) Building and installing i2c_example
5) License


------------------------------------------------------------------------------

1) General Information
======================

This project can be used for USB7002 I2C Bridging demo.


------------------------------------------------------------------------------

2) Requirements
===============

1) Software requirements
libusb 1.0
MPLABConnect.a
2) Hardware requirements
	USB7002.
	USB2.0 host controller.
Connect the hub to the usb port and check whether it has enumerated properly.This can be done by using lsusb command

$lsusb

Bus 002 Device 002: ID 8087:8001 Intel Corp.
Bus 002 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 007 Device 021: ID 0424:7040 Standard Microsystems Corp.
Bus 007 Device 020: ID 0424:4002 Standard Microsystems Corp.
Bus 007 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 006 Device 003: ID 0424:7002 Standard Microsystems Corp.
Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 001 Device 002: ID 8087:8009 Intel Corp.
Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
Bus 003 Device 002: ID 046d:c52b Logitech, Inc. Unifying Receiver
Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub


 0424 4002 is MCHP 2.0 hub. 0424 7002 is MCHP 3.0 hub. 0424 7040 is MCHP Hub feature controller
------------------------------------------------------------------------------

3) Building and installing MPLABConnect
==========================
$ cd MPLABConnect
$ sudo su
$ make
=============
Compiling MchpUSBInterface.cpp
=============
Compiling SpiFlash.cpp
=============
Compiling USBHubAbstraction.cpp
=============
Creating MPLABConnect.a


It will create a folder out, and and on successful compilation it will generate MPLABConnect.a.
Copy MPLABConnect.a to the folder USB70xx_I2C/example/i2c_Bridging

4) Building and installing i2c_Bridging example
==========================
$ cd examples/i2c_Bridging/
$ sudo su
$ make
=============
Compiling i2c_bridging.cpp
=============
Creating i2cBridging


It will create a folder out, and and on successful compilation it will generate i2c_Bridging.

$ cd out
$./i2cBridging --help

SDK Version:1.01.02
I2C Bridging Demo
SlaveAddr	: I2C Slave Address
StartAddr	: Start Address of I2C Slave to Read/Write
Start		: 1 - Generates Start condition
		: 0 - Does not generate Start condition
Stop		: 1 - Generates Stop condition
		: 0 - Does not generate Stop condition
Nack		: 1 - Generates NACK condition for the last byte of the transfer
		: 0 - Does not generate NACK condition

Operation 	: Write
Usage		: ./i2cBridging VID(Hex) PID(Hex) Devicepath(string) Operation(0x01) SlaveAddr StartAddr Length Data
Example		: ./i2cBridging 0x0424 0x4002 "7:2" 0x01 0x50 0x00 4 0x11 0x22 0x33 0x44

Operation 	: Read
Usage		: ./i2cBridging VID(Hex) PID(Hex) Devicepath(string) Operation(0x00) SlaveAddr StartAddr Length
Example		: ./i2cBridging 0x0424 0x4002 "7:2" 0x00 0x50 0x00 4

Operation	: Transfer: Write
Usage		: ./i2cBridging VID(Hex) PID(Hex) Devicepath(string) Operation(0x03) SlaveAddr StartAddr Length Start(0/1) Stop(0/1) Nack(0/1) Data
Example		: ./i2cBridging 0x0424 0x4002 "7:2" 0x03 0x50 0x00 4 1 1 0 0x11 0x22 0x33 0x44

Operation	: Transfer: Read
Usage		: ./i2cBridging VID(Hex) PID(Hex) Devicepath(string) Operation(0x04) SlaveAddr StartAddr Length Start(0/1) Stop(0/1) Nack(0/1)
Example		: ./i2cBridging 0x0424 0x4002 "7:2" 0x04 0x50 0x00 4 1 1 1

------------------------------------------------------------------------------


5) License
==========
**********************************************************************************
* © 2017 Microchip Technology Inc. and its subsidiaries.
* You may use this software and any derivatives exclusively with
* Microchip products.
* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS".
* NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
* INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
* AND FITNESS FOR A PARTICULAR PURPOSE, OR ITS INTERACTION WITH MICROCHIP
* PRODUCTS, COMBINATION WITH ANY OTHER PRODUCTS, OR USE IN ANY APPLICATION.
* IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
* BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.
* TO THE FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL
* CLAIMS IN ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF
* FEES, IF ANY, THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
* MICROCHIP PROVIDES THIS SOFTWARE CONDITIONALLY UPON YOUR ACCEPTANCE
* OF THESE TERMS.

------------------------------------------------------------------------------
